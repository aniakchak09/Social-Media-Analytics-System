/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import java.io.*;

public class App {
    protected final static String usersPath = "users.csv";
    protected final static String postsPath = "posts.csv";
    protected final static String followingPath = "following.csv";
    protected final static String likedPostsPath = "liked_posts.csv";
    protected final static String commentsPath = "comments.csv";
    protected final static String likedCommPath = "likedCommPath.csv";
    protected final static String sortFollowingPostsPath = "sort_following_posts.csv";
    protected final static String sortUserPostsPath = "sort_user_posts.csv";
    protected final static String detailsPath = "post_details.csv";
    protected final static String followersPath = "followers.csv";
    protected final static String topPostsPath = "top_posts.csv";
    protected final static String topCommsPath = "top_comments.csv";
    protected final static String topUsersPath = "top_followed.csv";
    protected final static String topLikedUsersPath = "top_liked_users.csv";
    protected static int postId = 0;    //acts like some sort of counter for the posts
    protected static int commId = 0;

    public App() {/* compiled code */}

    private static void cleanup() {
        try (FileWriter fw = new FileWriter(usersPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(postsPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(followingPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(likedPostsPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(commentsPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(likedCommPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(sortFollowingPostsPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(sortUserPostsPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(detailsPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(followersPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(topPostsPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(topCommsPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(topUsersPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileWriter fw = new FileWriter(topLikedUsersPath, false)) {
        } catch (IOException e) {
            e.printStackTrace();
        }

        postId = 0;
        commId = 0;
    }

    public static void main(java.lang.String[] strings) {
        if (strings == null) {
            System.out.println("Hello world!");
            return;
        }

        if (strings[0].equals("-cleanup-all")) {
            cleanup();
            return;
        }

        if (strings[0].equals("-create-user")) {
            Utilizator.createUser(strings);

        }

        if (strings[0].equals("-create-post")) {
            Postare.createPost(strings);
        }

        if (strings[0].equals("-delete-post-by-id")) {
            Postare.deletePost(strings);
        }

        if (strings[0].equals("-follow-user-by-username")) {
            Utilizator.follow(strings);
        }

        if (strings[0].equals("-unfollow-user-by-username")) {
            Utilizator.unfollow(strings);
        }

        if (strings[0].equals("-like-post")) {
            Postare.likePost(strings);
        }

        if (strings[0].equals("-unlike-post")) {
            Postare.unlikePost(strings);
        }

        if (strings[0].equals("-comment-post")) {
            Comentariu.commentPost(strings);
        }

        if (strings[0].equals("-delete-comment-by-id")) {
            Comentariu.deleteComm(strings);
        }

        if (strings[0].equals("-like-comment")) {
            Comentariu.likeComm(strings);
        }

        if (strings[0].equals("-unlike-comment")) {
            Comentariu.unlikeComm(strings);
        }

        if (strings[0].equals("-get-followings-posts")) {
            Utilizator.getFollowingPosts(strings);
        }

        if (strings[0].equals("-get-user-posts")) {
            Utilizator.getUserPosts(strings);
        }

        if (strings[0].equals("-get-post-details")) {
            Postare.getDetails(strings);
        }

        if (strings[0].equals("-get-following")) {
            Utilizator.getFollowing(strings);
        }

        if (strings[0].equals("-get-followers")) {
            Utilizator.getFollowers(strings);
        }

        if (strings[0].equals("-get-most-liked-posts")) {
            Postare.getMostLikedPosts(strings);
        }

        if (strings[0].equals("-get-most-commented-posts")) {
            Postare.getMostCommentedPosts(strings);
        }

        if (strings[0].equals("-get-most-followed-users")) {
            Utilizator.getMostFollowed(strings);
        }

        if (strings[0].equals("-get-most-liked-users")) {
            Utilizator.getMostLikedUsers(strings);
        }
    }
}